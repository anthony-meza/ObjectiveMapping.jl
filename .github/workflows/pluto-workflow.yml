name: Pluto PDF Export
on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
jobs:
  export-pluto:
    name: Export Pluto Notebooks to PDF
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Install dependencies
        run: |
          julia --project=pluto -e '
            using Pkg
            Pkg.add(url="https://github.com/ggebbie/AlgebraicArrays.jl.git")
            Pkg.add(url="https://github.com/ggebbie/BLUEs.jl.git")
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.add("PlutoPDF")
            Pkg.instantiate()'
      - name: Export Pluto notebooks to PDF
        run: |
          julia --project=pluto -e '
            using PlutoPDF
            
            # Function to find files recursively (compatible with all Julia versions)
            function find_files(dir, extension)
              files = String[]
              for (root, _, fs) in walkdir(dir)
                for f in fs
                  if endswith(f, extension)
                    push!(files, joinpath(root, f))
                  end
                end
              end
              return files
            end
            
            # Find all Pluto notebooks recursively
            notebooks = find_files(".", ".jl")
            
            # Export each notebook
            for notebook in notebooks
              try
                # Skip non-Pluto notebooks (simple heuristic check)
                content = read(notebook, String)
                if !occursin("### A Pluto.jl notebook ###", content)
                  println("Skipping non-Pluto notebook: $notebook")
                  continue
                end
                
                println("Exporting: $notebook")
                
                # Get the output path (same directory as the notebook)
                dir = dirname(notebook)
                base = basename(notebook, ".jl")
                pdf_file = joinpath(dir, "$(base).pdf")
                
                try
                  # Export to PDF using PlutoPDF
                  PlutoPDF.pluto_to_pdf(notebook, pdf_file)
                  println("Successfully exported PDF to: $pdf_file")
                catch e
                  println("Error exporting $notebook to PDF: $e")
                end
              catch e
                println("Error processing $notebook: $e")
              end
            end'
      - name: Commit PDF files to repository
        if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add '**/*.pdf'
          git diff --quiet && git diff --staged --quiet || git commit -m "Update Pluto notebook PDF exports [skip ci]"
          git push