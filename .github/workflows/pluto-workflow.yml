name: Pluto Export
on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
jobs:
  export-pluto:
    name: Export Pluto Notebooks
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Install dependencies
        run: |
          julia --project=pluto -e '
            using Pkg
            Pkg.add(url="https://github.com/ggebbie/AlgebraicArrays.jl.git")
            Pkg.add(url="https://github.com/ggebbie/BLUEs.jl.git")
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.add("PlutoStaticHTML")
            Pkg.add("ProcessCapture")
            Pkg.instantiate()'
          # Install wkhtmltopdf for PDF conversion
          sudo apt-get update -y
          sudo apt-get install -y wkhtmltopdf
      - name: Export Pluto notebooks
        run: |
          julia --project=pluto -e '
            using PlutoStaticHTML
            using ProcessCapture  # For running wkhtmltopdf
            
            # Clean up any existing HTML output directory
            if isdir("html_output")
              rm("html_output", recursive=true)
              println("Cleaned up previous HTML output directory")
            end
            
            # Create temporary HTML output directory
            mkpath("html_output")
            
            # Find all Pluto notebooks recursively
            notebooks = filter(endswith(".jl"), readdir(".", recursive=true))
            
            # Export each notebook
            for notebook in notebooks
              try
                # Skip non-Pluto notebooks (simple heuristic check)
                content = read(notebook, String)
                if !occursin("### A Pluto.jl notebook ###", content)
                  println("Skipping non-Pluto notebook: $notebook")
                  continue
                end
                
                println("Exporting: $notebook")
                # Get paths
                dir = dirname(notebook)
                base = basename(notebook, ".jl")
                
                # Create temp HTML file path for conversion
                html_dir = "html_output"
                html_file = joinpath(html_dir, "$(base)_temp.html")
                
                # Final PDF goes in same directory as notebook
                pdf_file = joinpath(dir, "$(base).pdf")
                
                try
                  # Export to temporary HTML
                  PlutoStaticHTML.notebook_to_html(notebook, html_file)
                  println("Exported temporary HTML to: $html_file")
                  
                  # Convert HTML to PDF using wkhtmltopdf and put in same folder as notebook
                  println("Converting to PDF...")
                  cmd = `wkhtmltopdf --enable-local-file-access --no-background --page-size A4 "$html_file" "$pdf_file"`
                  result = ProcessCapture.run(cmd)
                  
                  if result.exitcode == 0
                    println("Successfully exported PDF to: $pdf_file")
                  else
                    println("Error creating PDF from $html_file: $(result.stderr)")
                  end
                catch e
                  println("Error exporting $notebook: $e")
                end
              catch e
                println("Error processing $notebook: $e")
              end
            end
            
            # Clean up temporary HTML files
            if isdir("html_output")
              rm("html_output", recursive=true)
              println("Cleaned up temporary HTML files")
            end'
      - name: Commit PDF files to repository
        if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add '**/*.pdf'
          git diff --quiet && git diff --staged --quiet || git commit -m "Update Pluto notebook PDF exports [skip ci]"
          git push